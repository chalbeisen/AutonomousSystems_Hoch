// Generated by gencpp from file turtlesim_halbeisen/TurtlesimState.msg
// DO NOT EDIT!


#ifndef TURTLESIM_HALBEISEN_MESSAGE_TURTLESIMSTATE_H
#define TURTLESIM_HALBEISEN_MESSAGE_TURTLESIMSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <turtlesim/Pose.h>
#include <turtlesim/Color.h>
#include <geometry_msgs/Twist.h>

namespace turtlesim_halbeisen
{
template <class ContainerAllocator>
struct TurtlesimState_
{
  typedef TurtlesimState_<ContainerAllocator> Type;

  TurtlesimState_()
    : pose()
    , color()
    , twist()  {
    }
  TurtlesimState_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , color(_alloc)
    , twist(_alloc)  {
  (void)_alloc;
    }



   typedef  ::turtlesim::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::turtlesim::Color_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;





  typedef boost::shared_ptr< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> const> ConstPtr;

}; // struct TurtlesimState_

typedef ::turtlesim_halbeisen::TurtlesimState_<std::allocator<void> > TurtlesimState;

typedef boost::shared_ptr< ::turtlesim_halbeisen::TurtlesimState > TurtlesimStatePtr;
typedef boost::shared_ptr< ::turtlesim_halbeisen::TurtlesimState const> TurtlesimStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator1> & lhs, const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.color == rhs.color &&
    lhs.twist == rhs.twist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator1> & lhs, const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlesim_halbeisen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c35fa8e2a3f6d67a17abc9bc29d508c";
  }

  static const char* value(const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c35fa8e2a3f6d67ULL;
  static const uint64_t static_value2 = 0xa17abc9bc29d508cULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim_halbeisen/TurtlesimState";
  }

  static const char* value(const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim/Pose pose\n"
"turtlesim/Color color\n"
"geometry_msgs/Twist twist\n"
"================================================================================\n"
"MSG: turtlesim/Pose\n"
"float32 x\n"
"float32 y\n"
"float32 theta\n"
"\n"
"float32 linear_velocity\n"
"float32 angular_velocity\n"
"================================================================================\n"
"MSG: turtlesim/Color\n"
"uint8 r\n"
"uint8 g\n"
"uint8 b\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.color);
      stream.next(m.twist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurtlesimState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlesim_halbeisen::TurtlesimState_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::turtlesim::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::turtlesim::Color_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_HALBEISEN_MESSAGE_TURTLESIMSTATE_H
